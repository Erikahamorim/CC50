Diretrizes para a escrita de um bom código:

- correctness (correto)
- design (bem projetado) => sucinto, direto, sem redundância
- style (bem estilizado) => não interfere na funcionalidade, mas facilita a leitura e o entendimento do código

Compilador => programa que converte código fonte (em linguagens de programação) em código de máquina (binário)
    - em C (no IDE do curso) o comando pará copilar é "make nome_do_arquivo"
    - executar o código/arquivo/programa ./nome_do_arquivo (dentro da pasta)

Funções
    => efeito colateral (impressos em texto, áudio, etc)
    => valores de retorno / variáveis - não são "impressos", mas podem ser resgatados dentro do código

Arquivos de cabeçalho => .h - "biblioteca" de funções

=> modelo de código

#include <stdio.h>]
int main(void)
{
    prntf("hello, world");
}


=> syntatic sugar para incremento de variáveis
        counter++;
        counter += 1;
        counter = counter +1;


loops (repetições)
    whlie(condição)
        => int i = 0;
            while (i <50)
            {
                código a ser executado no laço de repetição;
                i++;
            }

    for(variável de contagem, condição, incrementação )
        => for (int i = 0; i < 50; i++)
        {
            código a ser executado no laço de repetição;
        }

//exemplo meu
#include <stdio.h>
#include <cs50.h>

int main(void)
{
    int qtd = get_int("Quantos meow você deseja?\n");

    for (int i = 0; i < qtd; i++){
        printf("meow\n");
    }
}

//exemplo meu

= criar uma função em C 
    void nome_function(void)
    {
        código_function
    }

Para "mostrar" a nova function no início do código (sendo boa prática redigi-lá no final):
        void nome_function(void);

        int main(void)

